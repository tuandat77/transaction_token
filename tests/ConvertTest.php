<?php


namespace Ezdefi\Poc\tests;

use Ezdefi\Poc\Converter;
use PHPUnit\Framework\TestCase;
use Mockery as m;

class ConvertTest extends TestCase
{
    private $converter;

    protected function setUp() {
        parent::setUp();
        $this->converter = new Converter();
    }

    protected function tearDown()
    {
        m::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testToWeiWithUnitIsPOC()
    {
        $this->assertEquals(1, $this->converter->toWei(1, 'poc'));
    }

    public function testToWeiWithUnitIsNotPOC()
    {
        $mock = m::mock(Converter::class)->makePartial()->shouldAllowMockingProtectedMethods();
        $mock->shouldReceive('getBCMUL')->once()->with(1, '1000000000000000000')->andReturn('bcmul_string');

        $this->assertEquals( 'bcmul_string', $mock->toWei(1, 'wei') );
    }

    public function testGetValueOfUnitExpectedException()
    {
        try {
            $this->converter->getValueOfUnit('non_exist');
            $this->fail('chua no exception');
        } catch (\UnexpectedValueException $e) {
            $this->assertEquals('A unit "non_exist" doesn\'t exist, please use the one of the following units: poc, wei', $e->getMessage());
        }

    }

    public function testGetValueOfUnit()
    {
        $this->assertEquals('1', $this->converter->getValueOfUnit('poc'));
        $this->assertEquals('1000000000000000000', $this->converter->getValueOfUnit('wei'));
    }

    private function getToWeiExpectedResults() {
        return '1234000000000000000';
    }
}